#include<stdio.h>
#include<stdlib.h>

int n, i, j, pos, temp, choice;
int Burst_time[20], Waiting_time[20], Turn_around_time[20], process[20];

float avg_Turn_around_time = 0, avg_Waiting_time = 0;
int total = 0;

void FCFS() {
    avg_Turn_around_time = 0;
    avg_Waiting_time = 0;
    total = 0;

    Waiting_time[0] = 0;

    for (i = 1; i < n; i++) {
        Waiting_time[i] = 0;
        for (j = 0; j < i; j++) {
            Waiting_time[i] += Burst_time[j];
        }
    }

    printf("\nProcess\t\tBurst Time\tWaiting Time\tTurnaround Time\n");

    for (i = 0; i < n; i++) {
        Turn_around_time[i] = Burst_time[i] + Waiting_time[i];
        avg_Waiting_time += Waiting_time[i];
        avg_Turn_around_time += Turn_around_time[i];
        printf("P[%d]\t\t%d\t\t%d\t\t%d\n", i + 1, Burst_time[i], Waiting_time[i], Turn_around_time[i]);
    }

    avg_Waiting_time /= n;
    avg_Turn_around_time /= n;

    printf("Average Waiting Time: %.2f\n", avg_Waiting_time);
    printf("Average Turnaround Time: %.2f\n", avg_Turn_around_time);
}

void SJF() {
    int bt[20], proc[20];
    for (i = 0; i < n; i++) {
        bt[i] = Burst_time[i];      // copy burst times
        proc[i] = process[i];       // copy process IDs
    }

    avg_Turn_around_time = 0;
    avg_Waiting_time = 0;
    total = 0;

    // Sorting based on burst time
    for (i = 0; i < n; i++) {
        pos = i;
        for (j = i + 1; j < n; j++) {
            if (bt[j] < bt[pos])
                pos = j;
        }

        // Swap burst times
        temp = bt[i];
        bt[i] = bt[pos];
        bt[pos] = temp;

        // Swap process IDs
        temp = proc[i];
        proc[i] = proc[pos];
        proc[pos] = temp;
    }

    Waiting_time[0] = 0;
    for (i = 1; i < n; i++) {
        Waiting_time[i] = 0;
        for (j = 0; j < i; j++)
            Waiting_time[i] += bt[j];

        total += Waiting_time[i];
    }

    avg_Waiting_time = (float)total / n;
    total = 0;

    printf("\nProcess\t\tBurst Time\tWaiting Time\tTurnaround Time\n");

    for (i = 0; i < n; i++) {
        Turn_around_time[i] = bt[i] + Waiting_time[i];
        total += Turn_around_time[i];
        printf("P[%d]\t\t%d\t\t%d\t\t%d\n", proc[i], bt[i], Waiting_time[i], Turn_around_time[i]);
    }

    avg_Turn_around_time = (float)total / n;

    printf("Average Waiting Time: %.2f\n", avg_Waiting_time);
    printf("Average Turnaround Time: %.2f\n", avg_Turn_around_time);
}

int main() {
    printf("Enter the total number of processes: ");
    scanf("%d", &n);

    printf("\nEnter Burst Time:\n");
    for (i = 0; i < n; i++) {
        printf("P[%d]: ", i + 1);
        scanf("%d", &Burst_time[i]);
        process[i] = i + 1;
    }

    while (1) {
        printf("\n----- MAIN MENU -----\n");
        printf("1. FCFS Scheduling\n");
        printf("2. SJF Scheduling\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: FCFS(); break;
            case 2: SJF(); break;
            case 3: exit(0);
            default: printf("Invalid Input!!!\n");
        }
    }

    return 0;
}
