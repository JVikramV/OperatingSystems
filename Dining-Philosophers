#include &lt;stdio.h&gt;
#include &lt;pthread.h&gt;
#include &lt;semaphore.h&gt;
#define N 5
#define THINKING 2
#define HUNGRY 1
#define EATING 0
#define LEFT (i + 4) % N
#define RIGHT (i + 1) % N
int state[N];
int phil[N] = {0,1,2,3,4};
sem_t mutex;
sem_t S[N];
void test(int i)
{

if (state[i] == HUNGRY &amp;&amp; state[LEFT] != EATING &amp;&amp;

state[RIGHT] != EATING)

{
state[i] = EATING;
sleep(2);
printf(&quot;Philosopher %d takes fork %d and %d\n&quot;, i +1,

LEFT +1, i +1);

printf(&quot;Philosopher %d is Eating\n&quot;, i +1);
sem_post(&amp;S[i]);

}
}
void take_fork(int i)
{
sem_wait(&amp;mutex);
state[i] = HUNGRY;

printf(&quot;Philosopher %d is Hungry\n&quot;,i+1);
test(i);
sem_post(&amp;mutex);
sem_wait(&amp;S[i]);
sleep(1);
}
void put_fork(int i)
{
sem_wait(&amp;mutex);
state[i] = THINKING;
printf(&quot;Philosopher %d putting fork %d and %d down\n&quot;,i +1, LEFT
+1, i +1);
printf(&quot;Philosopher %d is thinking\n&quot;, i+1);
test(LEFT);
test(RIGHT);
sem_post(&amp;mutex);
}
void* philosopher(void* num)
{
while (1)
{
int* i = num;
sleep(1);
take_fork(*i);
sleep(0);
put_fork(*i);
}
}
int main()
{
int i;
pthread_t thread_id[N];
sem_init(&amp;mutex,0,1);
for (i =0; i &lt; N; i++)

sem_init(&amp;S[i],0,0);
for (i =0; i &lt; N; i++)
{
pthread_create(&amp;thread_id[i], NULL, philosopher, &amp;phil[i]);
printf(&quot;Philosopher %d is thinking\n&quot;, i +1);

}
for (i =0; i &lt; N; i++)
{
pthread_join(thread_id[i], NULL);
}
}
