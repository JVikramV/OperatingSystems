#include <stdio.h>

static int mark[20];  // Marks if a process is completed or not
int i, j, np, nr;

int main() {
    int alloc[10][10];      // Allocation matrix
    int request[10][10];    // Request matrix
    int avail[10];          // Available resources
    int r[10];              // Total amount of each resource
    int w[10];              // Work vector

    // Input: number of processes
    printf("\nEnter the number of processes: ");
    scanf("%d", &np);

    // Input: number of resources
    printf("\nEnter the number of resources: ");
    scanf("%d", &nr);

    // Input: total amount of each resource
    for (i = 0; i < nr; i++) {
        printf("\nTotal amount of Resource R%d: ", i + 1);
        scanf("%d", &r[i]);
    }

    // Input: request matrix
    printf("\nEnter the request matrix:\n");
    for (i = 0; i < np; i++)
        for (j = 0; j < nr; j++)
            scanf("%d", &request[i][j]);

    // Input: allocation matrix
    printf("\nEnter the allocation matrix:\n");
    for (i = 0; i < np; i++)
        for (j = 0; j < nr; j++)
            scanf("%d", &alloc[i][j]);

    // Step 1: Calculate Available resources
    for (j = 0; j < nr; j++) {
        avail[j] = r[j];
        for (i = 0; i < np; i++) {
            avail[j] -= alloc[i][j];
        }
    }

    // Step 2: Mark processes with zero allocation
    for (i = 0; i < np; i++) {
        int count = 0;
        for (j = 0; j < nr; j++) {
            if (alloc[i][j] == 0)
                count++;
            else
                break;
        }
        if (count == nr)
            mark[i] = 1;  // Process has zero allocation, mark it as completed
    }

    // Step 3: Initialize work vector with available resources
    for (j = 0; j < nr; j++)
        w[j] = avail[j];

    // Step 4: Try to satisfy requests of unmarked processes
    for (i = 0; i < np; i++) {
        int canbeprocessed = 0;

        if (mark[i] != 1) {
            for (j = 0; j < nr; j++) {
                if (request[i][j] <= w[j])
                    canbeprocessed = 1;
                else {
                    canbeprocessed = 0;
                    break;
                }
            }

            if (canbeprocessed) {
                mark[i] = 1;  // Process can be completed
                for (j = 0; j < nr; j++)
                    w[j] += alloc[i][j];  // Release resources
            }
        }
    }

    // Step 5: Check for deadlock (any unmarked process)
    int deadlock = 0;
    for (i = 0; i < np; i++)
        if (mark[i] != 1)
            deadlock = 1;

    // Step 6: Output result
    if (deadlock)
        printf("\nDeadlock detected");
    else
        printf("\nNo Deadlock possible");

    return 0;
}
